{"componentChunkName":"component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js","path":"/history/","result":{"data":{"mdx":{"id":"ac426321-949c-5a70-8f92-ff2df567e024","excerpt":"In 2016 I was asked to help evaluate a large and ugly codebase for a client, working closely with my colleague at the time  Ra-el Peters .  The client hadâ€¦","fields":{"slug":"/history/"},"frontmatter":{"title":"History","description":null,"image":null,"disableTableOfContents":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"History\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In 2016 I was asked to help evaluate a large and ugly codebase for a client, working closely with my colleague at the time \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.linkedin.com/in/ra-el-peters-697ba325/\"\n  }), \"Ra-el Peters\"), \".  The client had started a big-bang re-write of their legacy code, but that endeavour seemed to be stalling.  We needed to quickly review both codebases and answer their key question:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Should they continue with the re-write, or revert to the legacy code and try a different approach?\")), mdx(\"p\", null, \"I was familiar with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://erik.doernenburg.com/2013/06/toxicity-reloaded/\"\n  }), \"Erik D\\xF6rnenberg's articles on Toxic code visualisation\"), \" but sadly most of the tools he referenced seemed to be abandoned, and other tools we knew of were quite focused on particular languages - this codebase was a mix of old versions of C#, SQL stored procedures, hand-rolled JQuery+JavaScript, AngularJS, newer versions of C#, and probably others we weren't aware of.  We didn't want to try to get SonarQube or similar installed and running in-depth metrics on this code - we wanted a quick way to get an overview, and drill down on the toxic parts.\"), mdx(\"p\", null, \"I'd also read Adam Tornhill's \\\"Your code as a crime scene\\\" and was quite keen to use his \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/adamtornhill/code-maat\"\n  }), \"code-maat\"), \" tools - which had the huge advantage of not really needing language parsers to work.  Adam pointed out that purely looking at lines-of-code might be enough - large files are correlated to complexity in many cases.\"), mdx(\"p\", null, \"So Ra-el and I threw together some code, using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/AlDanial/cloc\"\n  }), \"cloc\"), \" to count lines of code, \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/adamtornhill/code-maat\"\n  }), \"code-maat\"), \" to collect other metrics from source-control such as rate of change and number of authors, and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://observablehq.com/@d3/treemap\"\n  }), \"D3 Treemaps\"), \" to show file sizes.\"), mdx(\"p\", null, \"TODO: add what changed in 2018 and onwards\"));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[]}},"pageContext":{"slug":"/history/","next":{"label":"Introduction","link":"/"},"githubEditUrl":"https://github.com/kornysietsma/polyglot-tools-docs/tree/master/src/docs/history.mdx"}},"staticQueryHashes":["1954253342","2360221584","2501019404","2679457992"]}