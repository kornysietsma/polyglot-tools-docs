{"componentChunkName":"component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js","path":"/tools/explorer/data-format/","result":{"data":{"mdx":{"id":"d0df1c5d-c438-5c32-a417-2f45b4a5468d","excerpt":"The Polyglot Code Explorer relies on a JSON file format, which is fairly loose and not really documented ... until now! The format is based on files used in dâ€¦","fields":{"slug":"/tools/explorer/data-format/"},"frontmatter":{"title":"Data format","description":null,"image":null,"disableTableOfContents":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Data format\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The Polyglot Code Explorer relies on a JSON file format, which is fairly loose and not really documented ... until now!\"), mdx(\"p\", null, \"The format is based on files used in d3 demonstrations, usually called \\\"flare\\\" - though I'm not sure where the name came from.\"), mdx(\"p\", null, \"It's a very basic tree structure:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"name\\\": \\\"<root>\\\",\\n  \\\"data\\\": { ... root data ... },\\n  \\\"children\\\": [\\n      {\\n        \\\"name\\\": \\\"foo\\\",\\n        \\\"data:\\\" { ... foo data ... },\\n        \\\"children\\\": [\\n            ... and so on ...\\n        ]\\n      },\\n      {\\n          \\\"name\\\": \\\"bar.txt\\\",\\n          \\\"data\\\": { ... bar.txt data ... }\\n      }\\n  ],\\n}\\n\")), mdx(\"p\", null, \"Every node is a directory or file.  You can distinguish them only by the fact that files have no \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"children\"), \" entry - an empty directory will have an empty \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"children\"), \" entry.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data\"), \" is where all other data lives - TODO more docs!\"));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[]}},"pageContext":{"slug":"/tools/explorer/data-format/","next":{"label":"Introduction","link":"/"},"githubEditUrl":"https://github.com/kornysietsma/polyglot-tools-docs/tree/master/src/docs/tools/explorer/data-format.mdx"}},"staticQueryHashes":["1954253342","2360221584","2501019404","2679457992"]}