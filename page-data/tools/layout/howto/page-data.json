{"componentChunkName":"component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js","path":"/tools/layout/howto/","result":{"data":{"mdx":{"id":"ca6f1bce-c82f-5ac6-8d63-2c006a51a700","excerpt":"The offline layout script - it's too generous to call it an application! - is run as a node.js script; you'll need to install node.js to run it. Apologies thatâ€¦","fields":{"slug":"/tools/layout/howto/"},"frontmatter":{"title":"How to run the Polyglot Code Offline Layout script","description":null,"image":null,"disableTableOfContents":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to run the Polyglot Code Offline Layout script\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The offline layout script - it's too generous to call it an application! - is run as a node.js script; you'll need to install node.js to run it.\"), mdx(\"p\", null, \"Apologies that this is fairly clunky at the moment - this script largely exists because the voronoi layout I wanted to use was far too slow to run in a browser, especially as it fails pretty often (see \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/tools/layout/description\"\n  }), \"the docs\"), \" for more).\"), mdx(\"p\", null, \"So to run it:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Install node.js - see \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://nodejs.org/en/download/package-manager/\"\n  }), \"https://nodejs.org/en/download/package-manager/\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"clone the code from \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/kornysietsma/polyglot-code-offline-layout\"\n  }), \"https://github.com/kornysietsma/polyglot-code-offline-layout\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"In the checked out repository, run \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"npm install\"), \" to fetch all the dependencies\")), mdx(\"p\", null, \"Then you can run it with\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ node layout.js -i input.json -o output.json\\n\")), mdx(\"p\", null, \"If you have multiple repositories in your source json, e.g. for a group of projects or microservices, you can ask for a pretty circle-packed algorithm for the main diagram with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-c\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ node layout.js -c -i input.json -o output.json\\n\")), mdx(\"p\", null, \"There are some optional parameters:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"-h for help\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"-c to use circle packing for the top level shaping, voronoi for the rest\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"-g (the default) to accept an imperfect voronoi map - if you turn this off, the script will fail if it can't find a precise layout\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"-p NNN - specify how many points to use to draw the main circles around voronoi treemaps.  The default is 128, which is a pretty smooth circle.  You could specify \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-p 6\"), \" and it will use hexagons!\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[]}},"pageContext":{"slug":"/tools/layout/howto/","prev":{"label":"How to run the Scanner","link":"/tools/scanner/howto"},"next":{"label":"Data Format","link":"/tools/explorer/data-format"},"githubEditUrl":"https://github.com/kornysietsma/polyglot-tools-docs/tree/master/src/docs/tools/layout/howto.mdx"}},"staticQueryHashes":["1954253342","2360221584","2501019404","2679457992"]}